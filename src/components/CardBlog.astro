---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import Icon from "./Icon.astro";
import { getReadingTime } from "../utils/reading-time.ts";
import { getLastModifiedDate } from "../utils/last-update";

interface Props {
  post: CollectionEntry<"blog">;
  backgroundColor?: string;
  transitionIcon?: boolean;
}
const { post, backgroundColor = "var(--color-accent-cyan-500)", transitionIcon = false } = Astro.props;

// normalize id -> filename
const idWithExt = post.id.endsWith(".md") ? post.id : `${post.id}.md`;

// LOCAL path (main repo, includes submodule mount)
const localPath = `src/content/blog/${idWithExt}`;

// PATH in the CONTENT repo itself (likely no "src/content")
const repoPath = `blog/${idWithExt}`;

// Prefer explicit frontmatter override if you have it; else compute
const fallbackDate =
  post.data.lastUpdate
    ? new Date(post.data.lastUpdate as any)
    : (post.data.pubDate ? new Date(post.data.pubDate as any) : undefined);

const lastUpdate =
  (await getLastModifiedDate({ localPath, repoPath, fallback: fallbackDate })) ?? fallbackDate ?? new Date(0);

const formattedDateLastUpdate = lastUpdate.toLocaleDateString("en-GB");
const isoLastUpdate = lastUpdate.toISOString();
---
<a href={`/blog/${post.id}`}>
  <div class="container">
    <div class="image-container flex-center">
      {post.data.coverImage && (
        transitionIcon ? (
          <Image src={post.data.coverImage as ImageMetadata} alt={`${post.data.title} cover icon`} transition:name={post.data.title} style="max-height: 100%; width: auto;" />
        ) : (
          <Image src={post.data.coverImage as ImageMetadata} alt={`${post.data.title} cover icon`} style="max-height: 100%; width: auto;" />
        )
      )}
      {post.data.emoji && !post.data.coverImage && <div class="flex-center"><p class="text-align-center emoji" transition:name={post.data.title} style="font-size: 3.5rem;">{post.data.emoji}</p></div>}
    </div>
    <div class="text-container">
      <h3>{post.data.title}</h3>
      <p class="description">{post.data.description}</p>
      <div class="tag-row-container margin-bottom-xs">
        <Icon name="tag" label="Tag icon" size="1.5rem" />
        <p>{post.data.tags[0]}{post.data.tags[1] ? ", " + post.data.tags[1] : ""}</p>
      </div>
      <div class="last-row-container">
        <div class="last-update">
          <Icon name="updated" label="Tag icon" size="1.5rem" />
          <p><time datetime={isoLastUpdate}>{formattedDateLastUpdate}</time></p>
        </div>
        <div class="reading-time">
          <Icon name="timer" label="Tag icon" size="1.5rem" />
          <p>{getReadingTime(post.body || "")} min</p>
        </div>
      </div>
    </div>
  </div>
</a>
