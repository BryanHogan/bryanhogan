---
import type { TocItem } from "./generateToC";

interface Props {
	toc: TocItem[];
	depth?: number;
}

const { toc, depth = 0 } = Astro.props;
---

<ul>
	{
		toc.map((heading) => (
			<li>
				<a href={"#" + heading.slug}>
					<span>{heading.text}</span>
				</a>
				{heading.children.length > 0 && (
					<Astro.self toc={heading.children} depth={depth + 1} />
				)}
			</li>
		))
	}
</ul>

<style define:vars={{ depth }}>
	ul {
		padding: 0;
		list-style: none;
	}
	a {
		--pad-inline: 0.5rem;
		display: block;
		border-radius: 0.25rem;
		padding-block: 0.15rem;
		padding-inline: calc(1rem * var(--depth) + var(--pad-inline))
			var(--pad-inline);
		line-height: 1.25;
		color: var(--color-main-dark-50);
		text-decoration: none;
		font-size: 1rem;
		&:hover {
			color: var(--color-main-accent);
		}
	}
	.active {
		color: var(--color-main-bright);
		text-shadow: var(--text-shadow);
	}
</style>

<script>
	const isInViewport = (elem: Element) => {
		const bounding = elem.getBoundingClientRect();
		return (
			bounding.bottom >= 0 &&
			bounding.top <=
				(window.innerHeight * 0.8 ||
					document.documentElement.clientHeight)
		);
	};

	// Function to handle scroll event
	const handleScroll = () => {
		const headings = document.querySelectorAll("h1, h2, h3, h4, h5, h6");
		let activeHeading = null;

		headings.forEach((heading) => {
			if (isInViewport(heading)) {
				activeHeading = heading;
			}
		});

		if (activeHeading) {
			const activeLink = document.querySelector(
				`[href="#${activeHeading.id}"]`,
			);
			if (activeLink) {
				// Remove active class from all links
				document.querySelectorAll("a").forEach((link) => {
					link.classList.remove("active");
				});
				// Add active class to the corresponding link
				activeLink.classList.add("active");
			}
		}
	};

	// Add scroll event listener
	window.addEventListener("scroll", handleScroll);
</script>
