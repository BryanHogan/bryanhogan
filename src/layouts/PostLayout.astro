---
import Layout from "./Layout.astro";
import ButtondownSignupForm from "../components/ButtondownSignupForm.astro";
import TableOfContentsList from "../components/TableOfContents/TableOfContentsList.astro";
import { generateToC } from "../components/TableOfContents/generateToC";
import { Icons } from "../components/Icons";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { getReadingTime } from "../utils/reading-time";
import CompactPostsList from "../components/CompactPostsList.astro";

interface Props {
    post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const allPosts = (await getCollection("blog")).sort(
    (a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime(),
);
const indexOfPost = allPosts.findIndex(
    (posts) => post.data.title === posts.data.title,
);
const { headings } = await post.render();

const sameTagPosts = allPosts.filter(
    (posts) => 
        posts.data.tags && 
        posts.data.tags[0] === post.data.tags[0] && 
        posts.data.title !== post.data.title
);
---

<Layout
    title={post.data.title}
    metaDescription={post.data.description}
    headerMode="Reduced"
    ogType="article"
>
    <meta property="article:author" content="Bryan Hogan" slot="header" />
    <meta
        property="article:published_time"
        content={post.data.pubDate.toISOString()}
        slot="head"
    />
    <meta
        property="article:modified_time"
        content={post.data.lastUpdate.toISOString()}
        slot="head"
    />
    <meta
        property="article:tag"
        content={post.data.tags.map((tag) => tag).join(" ")}
        slot="head"
    />
    <div class="gradient-background">
        <img
            src={post.data.coverImage.url}
            alt={post.data.coverImage.alt}
            width="75"
            height="75"
            transition:name={post.data.coverImage.url}
        />
    </div>
    <div class="second-menu-section">
        <ul>
            <li>
                <button onclick="
        history.back()
        " class="">
                    <svg
                        class="arrow-back"
                        width="28"
                        height="28"
                        viewBox="0 0 22 22"
                        fill="currentColor"
                        set:html={Icons["leftarrow"]}
                    />
                </button>
            </li>
        </ul>
    </div>
    <article class="blog-post">
        <h1 class="text-align-center" id="_top">{post.data.title}</h1>
        <div class="center-container modern-container text-section">
            <slot />
            <div class="infos">
                <p>
                    Written by {
                        post.data.author ===
                        "Bryan@BryanHogan.com (Bryan Hogan)" ? (
                            <a href="/about">Bryan Hogan</a>
                        ) : (
                            post.data.author
                        )
                    }
                </p>
                <p>
                    Published: <time datetime={post.data.pubDate.toISOString()}
                        >{
                            new Date(post.data.pubDate).toLocaleDateString(
                                "en-GB",
                            )
                        }</time
                    >
                </p>
                <p>
                    Last Update: <time
                        datetime={post.data.lastUpdate.toISOString()}
                        >{
                            new Date(post.data.lastUpdate).toLocaleDateString(
                                "en-GB",
                            )
                        }</time
                    >
                </p>
            </div>
            <ButtondownSignupForm />
            <div class="next-prev-post-section">
                {
                    allPosts[indexOfPost - 1] ? (
                        <div>
                            <p>Next Post:</p>
                            <a
                                href={`/blog/${allPosts[indexOfPost - 1].slug}/`}
                            >
                                {allPosts[indexOfPost - 1].data.title}
                            </a>
                        </div>
                    ) : null
                }

                {
                    allPosts[indexOfPost + 1] ? (
                        <div style="margin-left: auto;">
                            <p>Previous Post:</p>
                            <a
                                href={`/blog/${allPosts[indexOfPost + 1].slug}/`}
                            >
                                {allPosts[indexOfPost + 1].data.title}
                            </a>
                        </div>
                    ) : null
                }
            </div>
            {sameTagPosts.length > 0 && (
                <>
                    <h2 class="text-align-center margin-inline-auto">Similar Posts</h2>
                    <CompactPostsList posts={sameTagPosts} />
                </>
            )}
        </div>
        <aside>
            <div class="toc">
                <div class="sticky-element">
                    <svg
                        class="toc-dropdown-icon"
                        width="26"
                        height="26"
                        viewBox="0 0 24 24"
                        fill="currentColor"
                        set:html={Icons["tableofcontents"]}
                    />
                    <div class="toc-items">
                        <p><strong>Table Of Contents</strong></p>
                        <TableOfContentsList
                            toc={generateToC(headings, {
                                minHeadingLevel: 1,
                                maxHeadingLevel: 6,
                                title: post.data.title,
                            })}
                        />
                    </div>
                </div>
            </div>
        </aside>
    </article>
</Layout>

<style>
    article {
        display: flex;
        flex-direction: row;
        justify-content: center;
        margin-inline: auto;
        flex-wrap: wrap;
    }
    .center-container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        flex-wrap: wrap;
    }
    h1 {
        margin-inline: 2rem;
        margin-bottom: 2rem;
        width: 100%;
    }
    .blog-post .center-container {
        & :global(h1) {
            text-wrap: balance;
        }
        & :global(h2) {
            word-break: break-word;
            margin-top: 2.25em;
            margin-bottom: 0.4em;
        }
        & :global(h3) {
            word-break: break-word;
            margin-top: 2.25em;
        }
        & :global(img) {
            object-fit: scale-down;
            width: 100%;
            height: auto;
            border-radius: 0.25rem;
        }
        & :global(ol) {
            list-style: decimal;
            word-break: break-word;
        }
        & :global(ul) {
            list-style: disc;
            word-break: break-word;
        }
        & :global(blockquote) {
            border-left: 2px solid var(--color-main-accent);
            padding: 0.75em 1em 0.75em 1.25em;
            border-radius: 0 0.5rem 0.5rem 0;
            background-color: var(--color-main-dark-brighter);
            & :global(footer) {
                margin-top: 0.5em;
            }
        }
        & :global(table) {
            border-collapse: collapse;
            width: fit-content;
            max-width: 100%;
            border: 2px solid var(--color-main-bright);
            display: block;
            margin-inline: auto;
            overflow-x: auto;
            & :global(td) {
                border: 1px solid var(--color-main-bright);
                padding-block: 12px;
                padding-inline: 8px;
            }
            & :global(th) {
                border: 1px solid var(--color-main-bright);
                padding: 12px;
            }
            & :global(tbody) :global(tr:nth-child(odd)) {
                background-color: var(--color-main-dark-brighter);
                background-color: color-mix(
                    in srgb,
                    var(--color-main-accent) 20%,
                    transparent
                );
            }
        }
        & :global(code),
        & :global(code span),
        & :global(pre) {
            border-radius: 4px;
            color: var(--color-side-accent);
            font-family: Menlo, monospace;
            overflow-x: auto;
            max-width: 100%;
            background-color: var(--color-main-dark-brighter) !important;
        }
        & :global(code) {
            background-color: var(--color-main-dark-brighter) !important;
        }
        & :global(pre) {
            padding: 1em;
        }
        & :global(.footnotes) {
            margin: 0px;
            padding: 0px;
            & :global(h2) {
                font-size: x-large;
            }
        }
    }
    @media only screen and (max-width: 699px) {
    }
    .gradient-background {
        min-height: 250px;
        height: 30vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        & img {
            height: 120px;
            width: auto;
        }
    }
    .second-menu-section {
        display: flex;
        flex-direction: row;
        align-items: center;
        & li {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0.5rem;
        }
        & button {
            background-color: var(--color-main-dark);
            color: var(--color-main-dark-50);
            border: none;
            & :hover {
                color: var(--color-main-bright);
            }
        }
    }
    .infos {
        border-top: 1px solid var(--color-main-bright);
        padding-top: 10px;
        display: flex;
        flex-direction: row;
        align-items: center;
        flex-wrap: wrap;
        justify-content: space-around;
        width: 100%;
        & p {
            font-size: 0.9rem;
            margin: 0px;
            padding: 0px;
        }
    }
    .next-prev-post-section {
        width: 90%;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        flex-wrap: wrap;
        margin-inline: auto;
        margin-top: 2em;
        & > * {
            max-width: 45%;
            flex: 1;
            padding: 10px;
            border: 1px solid var(--color-main-bright);
            border-radius: 1em;
        }
    }
    .toc {
        z-index: 10;
    }
    .toc-dropdown-icon {
        display: none;
        margin-left: auto;
        padding: 3px;
    }
    @media only screen and (max-width: 699px) {
        .gradient-background {
            min-height: 150px;
            height: 20vh;
            & img {
                height: 80px;
            }
        }
        .infos {
            flex-direction: column;
        }
    }

    @media only screen and (min-width: 1200px) {
        aside {
            padding-left: 2rem;
            flex-grow: 0;
        }
        .toc {
            width: max(20svw, 200px);
        }
        .sticky-element {
            transition: all 0.3s; /* Smooth transition for when it becomes fixed */
        }
        .fixed {
            position: fixed;
            top: var(--navbar-height);
            width: max(20svw, 200px);
        }
    }
    @media only screen and (max-width: 1199px) {
        .toc-dropdown-icon {
            display: block;
        }
        .toc .toc-items {
            display: none;
            max-height: calc(100svh - var(--navbar-height) - 75px);
            overflow-y: auto;
        }
        .toc:hover .toc-items {
            display: block;
            animation: toc-fade-in 300ms 1;
        }
        .toc:hover {
            border: 1px solid var(--color-main-dark-50);
            border-right: 0;
        }
        .toc {
            position: fixed;
            top: calc(var(--navbar-height) + 1rem);
            right: 0;
            padding-right: 0.5rem;
            margin-left: 2rem;
            background-color: var(--color-main-dark-transparent-90);
            backdrop-filter: blur(0.15rem);
            border-radius: 1rem 0 0 1rem;
            border: 1px solid transparent;
            border-right: 0;
        }
        .toc-items {
            padding-left: 0.5rem;
            padding-bottom: 1rem;
            min-width: 80vw;
        }
        aside,
        .toc {
            z-index: 1;
        }
    }
    @keyframes toc-fade-in {
        0% {
            opacity: 0;
            transform: translate(20px);
        }
        100% {
            opacity: 1;
        }
    }
</style>

<script type="module">
    const observer = new MutationObserver((mutations) => {
        const stickyElement = document.querySelector(".sticky-element");
        if (stickyElement) {
            const stickyOffset = stickyElement.offsetTop;

            const handleScroll = () => {
                if (window.scrollY >= stickyOffset - 50) {
                    stickyElement.classList.add("fixed");
                } else {
                    stickyElement.classList.remove("fixed");
                }
            };

            window.addEventListener("scroll", handleScroll);

            observer.disconnect();
        }
    });
    observer.observe(document.body, { childList: true, subtree: true });
</script>
