---
import { getCollection, render } from "astro:content";
import type { CollectionEntry } from "astro:content";
import "../styles/markdown.css";
import BaseLayout from "./BaseLayout.astro";
import { Image } from "astro:assets";
import { Icons } from "../components/Icons";
import EmailSignup from "../components/EmailSignup.astro";
import CardMin from "../components/CardMin.astro";
import CardGrid from "../components/CardGrid.astro";
import CardBlog from "../components/CardBlog.astro";
import TableOfContentsList from "../components/toc/TableOfContentsList.astro";
import { generateToC } from "../components/toc/generateToC";
import { getLastModifiedDate } from "../utils/last-update";
import { cardBlogBackgroundColors } from "../data/colors";

interface Props {
    post: CollectionEntry<"blog">;
}
const { post } = Astro.props;

const allPosts: CollectionEntry<"blog">[] = (await getCollection("blog")).sort(
    (a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime(),
);
const indexOfPost = allPosts.findIndex(
    (posts) => post.data.title === posts.data.title,
);
const sameTagPosts = allPosts.filter(
    (posts) => 
        posts.data.tags && 
        posts.data.tags[0] === post.data.tags[0] && 
        posts.data.title !== post.data.title
);
const { headings } = await render(post);



const lastUpdate = await (post.data.lastUpdate || getLastModifiedDate(`src/content/blog/${post.id}.md`));
const formattedDateLastUpdate = lastUpdate.toLocaleDateString("en-GB");
const isoLastUpdate = lastUpdate.toISOString();
---

<BaseLayout title={post.data.title} description={post.data.description} ogType="article">
    <meta
        property="article:published_time"
        content={post.data.pubDate.toISOString()}
        slot="head"
    />
    <meta
        property="article:modified_time"
        content={isoLastUpdate}
        slot="head"
    />
    <meta
        property="article:tag"
        content={post.data.tags.map((tag) => tag).join(" ")}
        slot="head"
    />
    <div class="gradient-background flex-center full-width">
        {
            post.data.coverImage &&
            <Image
                src={post.data.coverImage as ImageMetadata}
                alt={post.data.title + " cover image icon"}
                transition:name={post.data.title}
            />
        }
        {post.data.emoji && !post.data.coverImage && <div class="flex-center"><p class="text-align-center emoji" transition:name={post.data.title} style="font-size: 4rem;">{post.data.emoji}</p></div>}
    </div>
    <div class="sub-menu-container full-width">
        <button onclick="
        history.back()
        " class="back-button">
            <svg
                class="arrow-back"
                width="28"
                height="28"
                viewBox="0 0 22 22"
                fill="currentColor"
                set:html={Icons["leftarrow"]}
            />
        </button>
    </div>
    <h1 id="_top" class="text-align-center margin-bottom-m margin-top-s">{post.data.title}</h1>
    <div class="content-and-toc margin-bottom-xl">
        <div class="main-container">
            <main class="markdown-container main-content">
                <slot />
                <hr class="padding-top-l"/>
            </main>
            <div class="post-container">
                <div class="post-post-info-container margin-top-s margin-bottom-l">
                    <p><small>Published: <time datetime={post.data.pubDate.toISOString()}>{post.data.pubDate.toLocaleDateString("en-GB",)}</time></small></p>
                    <p><small>Last Update: <time datetime={isoLastUpdate}>{formattedDateLastUpdate}</time></small></p>
                </div>
                <div class="next-prev-post-container margin-top-l">
                    {allPosts[indexOfPost - 1] ? (<CardMin targetBlank={false} href={`/blog/${allPosts[indexOfPost - 1].id}/`}><p style="font-weight: var(--font-weight-bold);">Next post</p><p style="color: var(--color-accent-500);">{allPosts[indexOfPost - 1].data.title}</p></CardMin>) : null}
                    {allPosts[indexOfPost + 1] ? (<CardMin targetBlank={false} href={`/blog/${allPosts[indexOfPost + 1].id}/`}><p style="font-weight: var(--font-weight-bold);">Previous post</p><p style="color: var(--color-accent-500);">{allPosts[indexOfPost + 1].data.title}</p></CardMin>) : null}
                </div>
                <div class="email-container margin-top-l">
                    <h2 class="text-align-center margin-bottom-xs">Email Updates</h2>
                    <p class="margin-bottom-s">Once a month I write about what I've been up to, what I built, and cool things I came across.</p>
                    <EmailSignup class="set-max-width" />
                </div>
                {sameTagPosts.length > 0 && (
                    <h2 class="text-align-center margin-top-l margin-bottom-m">Similar Posts</h2>
                    <CardGrid columnWidth="max-2">
                        {
                            sameTagPosts.map((post, index) => (<CardBlog post={post} backgroundColor={cardBlogBackgroundColors[index % cardBlogBackgroundColors.length]}/>))
                        }
                    </CardGrid>
                )}
            </div>
        </div>
        <aside class="aside-container-right">
            <div class="toc">
                <div class="sticky-element">
                    <span class="toc-icon">
                        <svg
                            width="22"
                            height="22"
                            viewBox="0 0 24 24"
                            fill="currentColor"
                            set:html={Icons["rightcaret"]}
                        />
                    </span>
                    <div class="toc-items">
                        <p><strong>Table of Contents</strong></p>
                        <TableOfContentsList
                            toc={generateToC(headings, {
                                minHeadingLevel: 1,
                                maxHeadingLevel: 6,
                                title: post.data.title,
                            })}
                        />
                    </div>
                </div>
            </div>
        </aside>
    </div>
        
</BaseLayout>

<style>
    .main-container {
        width: 100%;
        max-width: var(--main-content-max-width);
    }
    .content-and-toc {
        display: flex;
        flex-direction: row;
        justify-content: center;
    }
    .gradient-background {
        background-color: var(--color-accent-500);
        background-image: var(--color-gradient);
        min-height: 25svh;
        >* {
            height: 11rem;
            padding-block: var(--space-l);
            width: auto;
        }
    }
    .emoji {
        background-color: var(--color-neutral-100);
        background-clip: text;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .sub-menu-container {
        padding-top: var(--space-2xs);
        .back-button {
        border: none;
            background-color: var(--color-neutral-900);
            color: var(--color-neutral-300);
            border-radius: var(--border-radius-s);
            &:hover, &:focus {
                background-color: var(--color-neutral-700);
            }
        }
    }
    .post-post-info-container {
        font-size: var(--font-size-small);
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        justify-content: flex-start;
        gap: var(--space-xs) var(--space-m);
        padding-inline: var(--space-m);
    }
    .email-container {
        background-color: var(--color-neutral-800);
        padding: var(--space-s) var(--space-m);
        border-radius: var(--border-radius-m);
    }
    .next-prev-post-container {
        display: flex;
        flex-direction: row;
        gap: var(--space-s);
    }

    .aside-container-right {
        width: 450px;
    }

    @media only screen and (max-width: 36rem) {
        h1 {
            font-size: 36px;
        }
    }

    @media only screen and (min-width: 1000px) {
		.toc {
			width: 100%;
            max-width: 430px;
            margin-left: 16px;
		}
		.toc-icon {
			display: none;
			padding: 0;
			margin: 0;
		}
		.sticky-element {
			transition: top 0.3s ease;
			z-index: 10;
			width: 100%;
			padding: 1rem;
		}
		.fixed {
			position: fixed;
			top: var(--navbar-height);
			width: var(--aside-width);
		}
	}
    @media only screen and (max-width: 999.9px) {
        .content-and-toc {
            flex-direction: column;
        }
        
		.toc {
			display: contents;
		}

		.toc-icon {
			position: fixed;
			top: calc(var(--space-2xs) + var(--navbar-height));
			right: var(--space-s);
			display: block;
			cursor: pointer;
			padding: var(--space-2xs);
			border-radius: var(--border-radius-m);
			transition: background-color;
            var(--transition-normal);
			z-index: 100;
            color: var(--color-neutral-300);
		}

		.toc-icon:hover,
		.toc-icon:focus-within {
			background-color: var(--color-neutral-800);
		}

		.toc-icon svg {
			transition: transform var(--transition-normal);
		}

		.toc-icon[aria-expanded="true"] svg {
			transform: rotate(90deg);
		}

		.toc-items {
			position: fixed;
			top: calc(var(--navbar-height) + var(--space-2xs));
			right: 0;
			display: none;
			max-height: calc(100svh - var(--navbar-height) - 75px);
			overflow-y: auto;
			background-color: var(--color-neutral-800);
			border-radius: var(--border-radius-m) 0 0 var(--border-radius-m);
			padding: var(--space-m);
			box-shadow: var(--shadow-m);
			min-width: 200px;
			max-width: calc(100vw - var(--space-xl));
			z-index: 99;
		}

		.toc-icon[aria-expanded="true"] + .toc-items {
			display: block;
			animation: slideInFromRight 0.2s ease-out;
		}
	}  
</style>


<script>
	function setupStickyToc() {
		const stickyElement = document.querySelector(
			".sticky-element",
		) as HTMLElement;
		const asideContainer = document.querySelector(".aside-container-right");

		if (stickyElement && asideContainer) {
			const updateWidth = () => {
				const asideWidth = asideContainer.getBoundingClientRect().width;
				stickyElement.style.setProperty(
					"--aside-width",
					`${asideWidth}px`,
				);
			};

			const updateOffset = () => {
				return stickyElement.offsetTop;
			};

			let stickyOffset = updateOffset();

			const handleScroll = () => {
				if (!stickyElement.classList.contains("fixed")) {
					stickyOffset = updateOffset();
				}

				if (window.scrollY >= stickyOffset - 50) {
					stickyElement.classList.add("fixed");
				} else {
					stickyElement.classList.remove("fixed");
				}
			};

			const handleResize = () => {
				stickyElement.classList.remove("fixed");
				updateWidth();
				stickyOffset = updateOffset();
				handleScroll();
			};

			updateWidth();

			window.addEventListener("scroll", handleScroll);
			window.addEventListener("resize", handleResize);

			return () => {
				window.removeEventListener("scroll", handleScroll);
				window.removeEventListener("resize", handleResize);
			};
		}
	}

	setupStickyToc();

	document.addEventListener("astro:after-swap", () => {
		setupStickyToc();
	});

	function setupTocToggle() {
		const tocToggle = document.querySelector(
			".toc-icon",
		) as HTMLElement | null;
		const tocItems = document.querySelector(
			".toc-items",
		) as HTMLElement | null;

		if (!tocToggle || !tocItems) return;

		tocToggle.setAttribute("aria-expanded", "false");
		tocToggle.setAttribute("aria-controls", "toc-items");
		tocItems.id = "toc-items";

		const closeToc = (event: Event) => {
			if (
				tocItems.contains(event.target as Node) ||
				tocToggle.contains(event.target as Node)
			)
				return;
			tocToggle.setAttribute("aria-expanded", "false");
		};

		const toggleToc = (event: Event) => {
			event.stopPropagation();
			const isExpanded =
				tocToggle.getAttribute("aria-expanded") === "true";
			tocToggle.setAttribute("aria-expanded", (!isExpanded).toString());
		};

		tocToggle.removeEventListener("click", toggleToc);
		document.removeEventListener("click", closeToc);

		tocToggle.addEventListener("click", toggleToc);
		document.addEventListener("click", closeToc);
	}

	setupTocToggle();

	document.addEventListener("astro:after-swap", setupTocToggle);
</script>

