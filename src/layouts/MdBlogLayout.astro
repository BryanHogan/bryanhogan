---
import { getCollection, render } from "astro:content";
import type { CollectionEntry } from "astro:content";
import "../styles/markdown.css";
import BaseLayout from "./BaseLayout.astro";
import { Image } from "astro:assets";
import { Icons } from "../components/Icons";
import EmailSignup from "../components/EmailSignup.astro";
import CardMin from "../components/CardMin.astro";
import CardGrid from "../components/CardGrid.astro";
import CardBlog from "../components/CardBlog.astro";
import TableOfContentsList from "../components/toc/TableOfContentsList.astro";
import { generateToC } from "../components/toc/generateToC";
import { getLastModifiedDate } from "../utils/last-update";
import { cardBlogBackgroundColors } from "../data/colors";
import Icon from "../components/Icon.astro";
import { mastodon } from "../data/socials";
import SocialShare from "../components/SocialShare.astro";

interface Props {
    post: CollectionEntry<"blog">;
}
const { post } = Astro.props;

const allPosts: CollectionEntry<"blog">[] = (await getCollection("blog")).sort(
    (a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime(),
);
const indexOfPost = allPosts.findIndex(
    (posts) => post.data.title === posts.data.title,
);
const sameTagPosts = allPosts.filter(
    (posts) => 
        posts.data.tags && 
        posts.data.tags[0] === post.data.tags[0] && 
        posts.data.title !== post.data.title
);
const { headings } = await render(post);



const lastUpdate = await (post.data.lastUpdate || getLastModifiedDate(`src/content/blog/${post.id}.md`));
const formattedDateLastUpdate = lastUpdate.toLocaleDateString("en-GB");
const isoLastUpdate = lastUpdate.toISOString();
---

<BaseLayout 
    title={post.data.title} 
    description={post.data.description} 
    ogType="article"
    articlePublished={post.data.pubDate}
    articleModified={lastUpdate}
    articleTags={post.data.tags}
>
    <div class="gradient-background flex-center full-width">
        {
            post.data.coverImage &&
            <Image
                src={post.data.coverImage as ImageMetadata}
                alt={post.data.title + " cover image icon"}
                transition:name={post.data.title}
            />
        }
        {post.data.emoji && !post.data.coverImage && <div class="flex-center"><p class="text-align-center emoji" transition:name={post.data.title} style="font-size: 4rem;">{post.data.emoji}</p></div>}
    </div>
    <div class="sub-menu-container full-width">
        <button onclick="
        history.back()
        " class="back-button">
            <svg
                class="arrow-back"
                width="28"
                height="28"
                viewBox="0 0 22 22"
                fill="currentColor"
                set:html={Icons["leftarrow"]}
            />
        </button>
    </div>
    <h1 id="_top" class="text-align-center margin-bottom-m margin-top-s">{post.data.title}</h1>
    <div class="content-and-toc margin-bottom-xl">
        <div class="main-container">
            <main class="markdown-container main-content">
                <slot />
                <p style="border: 1px solid var(--border-color); padding: var(--space-s); margin-top: var(--space-xl); border-radius: var(--border-radius-s);">
                    I want to hear your feedback! Was something confusing? Did you get stuck? Did you find this post amazingly helpful? Was it all very mid? Let me know per <a href="mailto:bryan@bryanhogan.com">e-mail</a> or at any of my social media spaces!
                </p>
            </main>
            <div class="end-of-post-section">
                <p class="margin-top-s">
                    I love your feedback! Was something confusing? Got stuck? Amazingly helpful? Just mid? Let me know per <a href="mailto:bryan@bryanhogan.com">e-mail</a> ðŸ‘ˆ or at any of my social media spaces ðŸ‘‡!
                </p>
                {
                    (post.data.blueskyRef || post.data.mastodonRef || post.data.threadsRef) &&
                    (
                        <p class="heading-line-element">Like & comment this post on:</p>
                        <ul role="list" class="social-ref-icons">
                            {(post.data.blueskyRef && <li><a href={post.data.blueskyRef} target="_blank"><Icon name="bluesky" label="BlueSky" size="1rem"/> BlueSky</a></li>)}
                            {(post.data.mastodonRef && <li><a href={post.data.mastodonRef} target="_blank"><Icon name="mastodon" label="Mastodon" size="1rem"/> Mastodon</a></li>)}
                            {(post.data.threadsRef && <li><a href={post.data.threadsRef} target="_blank"><Icon name="threads" label="Threads" size="1rem"/> Threads</a></li>)}
                        </ul>
                    )
                }
                <p class="heading-line-element">Dates</p>
                <div class="post-post-dates-info-container">
                    <p class="subtle">Published: <time datetime={post.data.pubDate.toISOString()}>{post.data.pubDate.toLocaleDateString("en-GB",)}</time></p>
                    <p class="subtle">Last Update: <time datetime={isoLastUpdate}>{formattedDateLastUpdate}</time></p>
                </div>
                <p class="heading-line-element">Next & previous post</p>
                <div class="next-prev-post-container">
                    {allPosts[indexOfPost - 1] ? (<CardMin targetBlank={false} href={`/blog/${allPosts[indexOfPost - 1].id}/`}><p style="">Next post</p><p style="color: var(--color-accent-500);">{allPosts[indexOfPost - 1].data.title}</p></CardMin>) : null}
                    {allPosts[indexOfPost + 1] ? (<CardMin targetBlank={false} href={`/blog/${allPosts[indexOfPost + 1].id}/`}><p style=";">Previous post</p><p style="color: var(--color-accent-500);">{allPosts[indexOfPost + 1].data.title}</p></CardMin>) : null}
                </div>
                <p class="heading-line-element">Tags</p>
                <div class="tags-container"> 
                    {post.data.tags?.length && (
                        <ul role="list" class="tag-list" style="gap: var(--space-s)">
                            {post.data.tags.map((tag) => {
                            const slug = tag
                                .toLowerCase()
                                .replace(/\s+/g, "-")
                                .replace(/[^a-z0-9\-]/g, "");
                            return (
                                <li>
                                <a href={`/tags/${slug}`} rel="tag">{tag}</a>
                                </li>
                            );
                            })}
                        </ul>
                    )}
                </div>
                <p class="heading-line-element">Monthly Newsletter</p>
                <p>Join it here.......</p>
                <p><small>No spam. Unsubscribe anytime.</small></p>
                <p class="heading-line-element">Share</p>
                <p>Share with one of these</p>
            </div>
            <div class="post-container">

                
                
                <div class="next-prev-post-container margin-top-l">
                    {allPosts[indexOfPost - 1] ? (<CardMin targetBlank={false} href={`/blog/${allPosts[indexOfPost - 1].id}/`}><p style="font-weight: var(--font-weight-bold);">Next post</p><p style="color: var(--color-accent-500);">{allPosts[indexOfPost - 1].data.title}</p></CardMin>) : null}
                    {allPosts[indexOfPost + 1] ? (<CardMin targetBlank={false} href={`/blog/${allPosts[indexOfPost + 1].id}/`}><p style="font-weight: var(--font-weight-bold);">Previous post</p><p style="color: var(--color-accent-500);">{allPosts[indexOfPost + 1].data.title}</p></CardMin>) : null}
                </div>
                
                <div class="email-container margin-top-xl">
                    <p class="text-align-center margin-bottom-xs"><strong>Email Updates</strong></p>
                    <p class="margin-bottom-s">Join my monthly updates. No spam. Unsubscribe anytime.</p>
                    <EmailSignup class="set-max-width" />
                </div>
                <SocialShare 
                    title={post.data.title}
                    url={`${Astro.site?.origin || 'https://bryanhogan.com'}/blog/${post.id}/`}
                    description={post.data.description}
                />
                {sameTagPosts.length > 0 && (
                    <details>
                        <summary class="margin-top-xl margin-bottom-m margin-inline-auto" style="font-size: var(--text-size-3xl);">Similar Posts</summary>
                        <CardGrid columnWidth="max-2">
                            {
                                sameTagPosts.map((post, index) => (<CardBlog post={post} backgroundColor={cardBlogBackgroundColors[index % cardBlogBackgroundColors.length]}/>))
                            }
                        </CardGrid>
                    </details>
                )}
            </div>
        </div>
        <aside class="aside-container-right">
            <div class="toc">
                <div class="sticky-element">
                    <span class="toc-icon">
                        <svg
                            width="22"
                            height="22"
                            viewBox="0 0 24 24"
                            fill="currentColor"
                            set:html={Icons["rightcaret"]}
                        />
                    </span>
                    <div class="toc-items">
                        <p><strong>Table of Contents</strong></p>
                        <TableOfContentsList
                            toc={generateToC(headings, {
                                minHeadingLevel: 1,
                                maxHeadingLevel: 6,
                                title: post.data.title,
                            })}
                        />
                    </div>
                </div>
            </div>
        </aside>
    </div>
        
</BaseLayout>

<style>
    .main-container {
        width: 100%;
        max-width: var(--main-content-max-width);
    }
    .content-and-toc {
        display: flex;
        flex-direction: row;
        justify-content: center;
    }
    .gradient-background {
        background-color: var(--color-accent-500);
        background-image: var(--color-gradient);
        min-height: 25svh;
        >* {
            height: 11rem;
            padding-block: var(--space-l);
            width: auto;
        }
    }
    .emoji {
        background-color: var(--color-neutral-100);
        background-clip: text;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .end-of-post-section {
        margin-top: var(--space-l);
        padding-inline: var(--space-s);
        background-color: var(--color-neutral-800);
        border-radius: var(--border-radius-m);
        border: 1px solid var(--color-neutral-700);
        > p {
            margin-bottom: var(--space-s);
        }
        .subtle {
            color: var(--color-neutral-300);
        }
        .heading-line-element {
            font-weight: var(--font-weight-bold);
            margin-top: var(--space-xl);
        }
    }

    .social-ref-icons {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
        gap: var(--space-xs);
        li a {
            padding: var(--space-xs);
            border: 1px solid var(--color-neutral-500);
            background-color: var(--color-neutral-900);
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
            gap: var(--space-2xs);
            cursor: pointer;
            text-decoration: none;
        }
    }

    .sub-menu-container {
        padding-top: var(--space-2xs);
        .back-button {
        border: none;
            background-color: var(--color-neutral-900);
            color: var(--color-neutral-300);
            border-radius: var(--border-radius-s);
            &:hover, &:focus {
                background-color: var(--color-neutral-700);
            }
        }
    }
    .post-post-dates-info-container {
        /*font-size: var(--font-size-small);*/
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        justify-content: flex-start;
        gap: var(--space-xs) var(--space-m);
    }
    .email-container {
        background-color: var(--color-neutral-800);
        padding: var(--space-s) var(--space-m);
        border-radius: var(--border-radius-m);
    }
    .tag-list {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
        gap: var(--space-xs);
        li {
            border: 1px solid var(--color-neutral-500);
            padding: var(--space-2xs) var(--space-xs);
            background-color: var(--color-neutral-900);

        }
    }
    .next-prev-post-container {
        display: flex;
        flex-direction: row;
        gap: var(--space-s);
    }

    .aside-container-right {
        width: 450px;
    }

    @media only screen and (max-width: 36rem) {
        h1 {
            font-size: 36px;
        }
    }

    @media only screen and (min-width: 1000px) {
		.toc {
			width: 100%;
            max-width: 430px;
            margin-left: 16px;
		}
		.toc-icon {
			display: none;
			padding: 0;
			margin: 0;
		}
		.sticky-element {
			transition: top 0.3s ease;
			z-index: 10;
			width: 100%;
			padding: 1rem;
		}
		.fixed {
			position: fixed;
			top: var(--navbar-height);
			width: var(--aside-width);
		}
	}
    @media only screen and (max-width: 999.9px) {
        .content-and-toc {
            flex-direction: column;
        }
        
		.toc {
			display: contents;
		}

		.toc-icon {
			position: fixed;
			top: calc(var(--space-2xs) + var(--navbar-height));
			right: var(--space-s);
			display: block;
			cursor: pointer;
			padding: var(--space-2xs);
			border-radius: var(--border-radius-m);
			transition: background-color;
            var(--transition-normal);
			z-index: 100;
            color: var(--color-neutral-300);
		}

		.toc-icon:hover,
		.toc-icon:focus-within {
			background-color: var(--color-neutral-800);
		}

		.toc-icon svg {
			transition: transform var(--transition-normal);
		}

		.toc-icon[aria-expanded="true"] svg {
			transform: rotate(90deg);
		}

		.toc-items {
			position: fixed;
			top: calc(var(--navbar-height) + var(--space-2xs));
			right: 0;
			display: none;
			max-height: calc(100svh - var(--navbar-height) - 75px);
			overflow-y: auto;
			background-color: var(--color-neutral-800);
			border-radius: var(--border-radius-m) 0 0 var(--border-radius-m);
			padding: var(--space-m);
			box-shadow: var(--shadow-m);
			min-width: 200px;
			max-width: calc(100vw - var(--space-xl));
			z-index: 99;
		}

		.toc-icon[aria-expanded="true"] + .toc-items {
			display: block;
			animation: slideInFromRight 0.2s ease-out;
		}
	}  
</style>

<script is:inline>
    function setupStickyToc() {
      const stickyElement = document.querySelector(".sticky-element");
      const asideContainer = document.querySelector(".aside-container-right");
      if (!stickyElement || !asideContainer) return;
  
      if (stickyElement.dataset.initialized === "true") return;
      stickyElement.dataset.initialized = "true";
  
      const updateWidth = () => {
        const asideWidth = asideContainer.getBoundingClientRect().width;
        stickyElement.style.setProperty("--aside-width", `${asideWidth}px`);
      };
  
      let stickyOffset = stickyElement.offsetTop;
  
      const handleScroll = () => {
        if (!stickyElement.classList.contains("fixed")) {
          stickyOffset = stickyElement.offsetTop;
        }
        if (window.scrollY >= stickyOffset - 50) {
          stickyElement.classList.add("fixed");
        } else {
          stickyElement.classList.remove("fixed");
        }
      };
  
      const handleResize = () => {
        stickyElement.classList.remove("fixed");
        updateWidth();
        stickyOffset = stickyElement.offsetTop;
        handleScroll();
      };
  
      updateWidth();
      window.addEventListener("scroll", handleScroll);
      window.addEventListener("resize", handleResize);
    }
  
    function setupTocToggle() {
      const tocToggle = document.querySelector(".toc-icon");
      const tocItems = document.querySelector(".toc-items");
      if (!tocToggle || !tocItems) return;
  
      if (tocToggle.dataset.initialized === "true") return;
      tocToggle.dataset.initialized = "true";
  
      tocToggle.setAttribute("aria-expanded", "false");
  
      const closeToc = (event) => {
        if (
          tocItems.contains(event.target) ||
          tocToggle.contains(event.target)
        ) return;
        tocToggle.setAttribute("aria-expanded", "false");
      };
  
      const toggleToc = (event) => {
        event.stopPropagation();
        const isExpanded = tocToggle.getAttribute("aria-expanded") === "true";
        tocToggle.setAttribute("aria-expanded", (!isExpanded).toString());
      };
  
      tocToggle.addEventListener("click", toggleToc);
      document.addEventListener("click", closeToc);
    }
  
    function initializeToc() {
      setupStickyToc();
      setupTocToggle();
    }
  
    document.addEventListener("astro:page-load", () => {
      setTimeout(initializeToc, 50);
    });
</script>
